// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: lot.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LotService_CreateLot_FullMethodName = "/auction.LotService/CreateLot"
	LotService_GetLot_FullMethodName    = "/auction.LotService/GetLot"
	LotService_UpdateLot_FullMethodName = "/auction.LotService/UpdateLot"
	LotService_DeleteLot_FullMethodName = "/auction.LotService/DeleteLot"
	LotService_ListLots_FullMethodName  = "/auction.LotService/ListLots"
)

// LotServiceClient is the client API for LotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для работы с лотами
type LotServiceClient interface {
	// Создание нового лота
	CreateLot(ctx context.Context, in *CreateLotRequest, opts ...grpc.CallOption) (*CreateLotResponse, error)
	// Получение лота по ID
	GetLot(ctx context.Context, in *GetLotRequest, opts ...grpc.CallOption) (*GetLotResponse, error)
	// Обновление лота
	UpdateLot(ctx context.Context, in *UpdateLotRequest, opts ...grpc.CallOption) (*UpdateLotResponse, error)
	// Удаление лота
	DeleteLot(ctx context.Context, in *DeleteLotRequest, opts ...grpc.CallOption) (*DeleteLotResponse, error)
	// Получение списка лотов с пагинацией
	ListLots(ctx context.Context, in *ListLotsRequest, opts ...grpc.CallOption) (*ListLotsResponse, error)
}

type lotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLotServiceClient(cc grpc.ClientConnInterface) LotServiceClient {
	return &lotServiceClient{cc}
}

func (c *lotServiceClient) CreateLot(ctx context.Context, in *CreateLotRequest, opts ...grpc.CallOption) (*CreateLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLotResponse)
	err := c.cc.Invoke(ctx, LotService_CreateLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotServiceClient) GetLot(ctx context.Context, in *GetLotRequest, opts ...grpc.CallOption) (*GetLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLotResponse)
	err := c.cc.Invoke(ctx, LotService_GetLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotServiceClient) UpdateLot(ctx context.Context, in *UpdateLotRequest, opts ...grpc.CallOption) (*UpdateLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLotResponse)
	err := c.cc.Invoke(ctx, LotService_UpdateLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotServiceClient) DeleteLot(ctx context.Context, in *DeleteLotRequest, opts ...grpc.CallOption) (*DeleteLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLotResponse)
	err := c.cc.Invoke(ctx, LotService_DeleteLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lotServiceClient) ListLots(ctx context.Context, in *ListLotsRequest, opts ...grpc.CallOption) (*ListLotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLotsResponse)
	err := c.cc.Invoke(ctx, LotService_ListLots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotServiceServer is the server API for LotService service.
// All implementations must embed UnimplementedLotServiceServer
// for forward compatibility.
//
// Сервис для работы с лотами
type LotServiceServer interface {
	// Создание нового лота
	CreateLot(context.Context, *CreateLotRequest) (*CreateLotResponse, error)
	// Получение лота по ID
	GetLot(context.Context, *GetLotRequest) (*GetLotResponse, error)
	// Обновление лота
	UpdateLot(context.Context, *UpdateLotRequest) (*UpdateLotResponse, error)
	// Удаление лота
	DeleteLot(context.Context, *DeleteLotRequest) (*DeleteLotResponse, error)
	// Получение списка лотов с пагинацией
	ListLots(context.Context, *ListLotsRequest) (*ListLotsResponse, error)
	mustEmbedUnimplementedLotServiceServer()
}

// UnimplementedLotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLotServiceServer struct{}

func (UnimplementedLotServiceServer) CreateLot(context.Context, *CreateLotRequest) (*CreateLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLot not implemented")
}
func (UnimplementedLotServiceServer) GetLot(context.Context, *GetLotRequest) (*GetLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLot not implemented")
}
func (UnimplementedLotServiceServer) UpdateLot(context.Context, *UpdateLotRequest) (*UpdateLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLot not implemented")
}
func (UnimplementedLotServiceServer) DeleteLot(context.Context, *DeleteLotRequest) (*DeleteLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLot not implemented")
}
func (UnimplementedLotServiceServer) ListLots(context.Context, *ListLotsRequest) (*ListLotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLots not implemented")
}
func (UnimplementedLotServiceServer) mustEmbedUnimplementedLotServiceServer() {}
func (UnimplementedLotServiceServer) testEmbeddedByValue()                    {}

// UnsafeLotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LotServiceServer will
// result in compilation errors.
type UnsafeLotServiceServer interface {
	mustEmbedUnimplementedLotServiceServer()
}

func RegisterLotServiceServer(s grpc.ServiceRegistrar, srv LotServiceServer) {
	// If the following call pancis, it indicates UnimplementedLotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LotService_ServiceDesc, srv)
}

func _LotService_CreateLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotServiceServer).CreateLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotService_CreateLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotServiceServer).CreateLot(ctx, req.(*CreateLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotService_GetLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotServiceServer).GetLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotService_GetLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotServiceServer).GetLot(ctx, req.(*GetLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotService_UpdateLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotServiceServer).UpdateLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotService_UpdateLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotServiceServer).UpdateLot(ctx, req.(*UpdateLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotService_DeleteLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotServiceServer).DeleteLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotService_DeleteLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotServiceServer).DeleteLot(ctx, req.(*DeleteLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LotService_ListLots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotServiceServer).ListLots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LotService_ListLots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotServiceServer).ListLots(ctx, req.(*ListLotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LotService_ServiceDesc is the grpc.ServiceDesc for LotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.LotService",
	HandlerType: (*LotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLot",
			Handler:    _LotService_CreateLot_Handler,
		},
		{
			MethodName: "GetLot",
			Handler:    _LotService_GetLot_Handler,
		},
		{
			MethodName: "UpdateLot",
			Handler:    _LotService_UpdateLot_Handler,
		},
		{
			MethodName: "DeleteLot",
			Handler:    _LotService_DeleteLot_Handler,
		},
		{
			MethodName: "ListLots",
			Handler:    _LotService_ListLots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lot.proto",
}
